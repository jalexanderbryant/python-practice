class DoubleLinkedListNode(object):

    def __init__(self, value, nxt=None, prev=None):
        self.next = nxt
        self.prev = prev
        self.value = value

    def __repr__(self):
        nval = self.next and self.next.value or None
        pval = self.prev and self.prev.value or None
        return f"[{self.value}, {repr(nval)}, {repr(pval)}]"


class DoubleLinkedList(object):
    """
    DoubleLinkedList definition
    """
    def __init__(self):
        self.__count = 0 # Initialize to negative 2 to account for sentinels
        self.begin = self.__create_new_node(None)
        self.end = self.__create_new_node(None)
        self.begin.next = self.end
        self.end.prev = self.begin

    def __create_new_node(self, value):
        node = DoubleLinkedListNode(value, None, None)
        return node

    def __increment_count():
        self.__count += 1

    def __decrement_count():
        self.__count -= 1

    def push(self, obj):
        """Appends new value on the end of the list"""
    
        #self.dump()

    def pop(self):
        """ Removes and returns the last item"""
        pass


    def shift(self, obj):
        """Another name for push."""
        pass

    def unshift(self):
        """Removes and returns the first item."""
        pass

    def detach_node(self):
        """ Take a node, detach it from the list, whether the node is at the
            front, middle, or end of the list."""

    def remove(self, obj):
        """Finds a matching item and removes it from the list. Returns
            the index. """
        pass


    def first(self):
        """Returns a *reference* to the first item, does not remove"""
        pass

    def last(self):
        """ Returns a reference to the last ite, does not remove."""
        pass

    def count(self):
        """Count the number of elements in the list."""
        pass

    def get(self, index):
        """ Get the value at index."""
        pass

    def reverse(self):
        # self.__reverse_recursive(self.begin)
        pass

    def __reverse_recursive(self, curr):
        pass

    def dump(self, mark=None):
        """ Debugging Tool: Dump the contents of the list."""
        index = 0
        print("Mark: {}".format(mark))
        curr_node = self.begin
        if curr_node == None:
            print("Empty list")
        print("List: ", end =' ')
        while curr_node != None:
            if curr_node == self.begin:
                print("Header", end=' -> ')
            elif curr_node == self.tail:
                print("Trailer", end=' -> ')
            print("{}: {}".format(index, curr_node.value), end=' -> ')
            curr_node = curr_node.next
            if curr_node == None:
                print("None")
            index += 1
